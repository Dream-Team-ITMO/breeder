import io
import re
import os
import sys
import base64
import zlib
import argparse
from colorama import init, Fore, Back, Style


BREEDER_NOTE = """\
#
# [WARNING]  This is a compilation of multiple Python files.
#            Autogenerated by TheBreeder. Do not edit!
#
"""
BREEDER_PREAMBLE = """\
#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# [ Combined with TheBreeder: https://github.com/Dream-Team-ITMO/breeder ] #

import base64, os, sys, zlib
try:
  import io as StringIO
except ImportError:
  import StringIO
if sys.version_info >= (999, 3, 4):
  from importlib.util import module_from_spec as new_module
else:
  import warnings
  with warnings.catch_warnings():
    warnings.filterwarnings("ignore",category=DeprecationWarning)
    from imp import new_module
__FILES = {}
__builtin_open = open
__os_path_exists, __os_path_getsize = os.path.exists, os.path.getsize
def __comb_open(filename, *args, **kwargs):
  if filename in __FILES:
    return StringIO.StringIO(__FILES[filename])
  else:
    return __builtin_open(filename, *args, **kwargs)
def __comb_exists(filename, *args, **kwargs):
  if filename in __FILES:
    return True
  else:
    return __os_path_exists(filename, *args, **kwargs)
def __comb_getsize(filename, *args, **kwargs):
  if filename in __FILES:
    return len(__FILES[filename])
  else:
    return __os_path_getsize(filename, *args, **kwargs)
if 'b64decode' in dir(base64):
  __b64d = base64.b64decode
else:
  __b64d = base64.decodestring
open = __comb_open
os.path.exists = __comb_exists
os.path.getsize = __comb_getsize
sys.path[0:0] = ['.SELF/']
"""
BREEDER_POSTAMBLE = """\

# EOF #
"""
BREEDER_DIVIDER = "#" * 79


def br79(s: str) -> list[str]:
    lines = []
    while len(s) > 0:
        lines.append(str(s[0:79], 'utf-8'))
        s = s[79:]
    return lines


def format_snake(fn, raw=False, compress=False, binary=False):
    if not raw and compress or binary:
        mode = 'rb'
    else:
        mode = 'r'
    fd = open(fn, mode)
    if raw:
        pre, post = '"""\\', '"""'
        lines = [l.replace('\n', '')
                  .replace('\r', '')
                 for l in fd.readlines()
                 if not l.startswith('from __future__ import')]
    elif compress:
        pre, post = 'zlib.decompress(__b64d("""\\', '"""))'
        lines = br79(base64.b64encode(zlib.compress(fd.read(), 9)))
    elif binary:
        pre, post = '__b64d("""\\', '""")'
        lines = br79(base64.b64encode(fd.read()))
    else:
        pre, post = '"""\\', '"""'
        lines = [l.replace('\n', '')
                  .replace('\r', '')
                  .replace('\\', '\\\\')
                  .replace('"', '\\"')
                 for l in fd.readlines()]
    fd.close()
    return pre, lines, post


class Breeder(object):
    _ignore: set[str] = ("pyc", "tmp", "bak")
    _python_extensions: set[str] = ("py", "pyw")
    _modules: list[str] = []
    _files: list[str] = []
    _modules_to_file: dict[str, str] = {}
    _modules_inits: list[str] = []
    _modules_order: list[str] = []
    _execs: list[str] = []

    def __init__(self) -> None:
        pass

    def _breed(self, compress: bool = False, out: io.TextIOWrapper = sys.stdout) -> str:
        for bn in self._modules_inits:
            fn = self._modules_to_file[bn]
            pre, lines, post = format_snake(fn, raw=False, compress=compress, binary=False)
            text = ['__FILES[".SELF/%s"] = %s' % (fn, pre)]
            text.extend(lines)
            text.extend([
                post,
                'm = sys.modules["%s"] = new_module("%s")' % (bn, bn),
                'm.__file__ = "%s"' % (fn, ),
                'm.open = __comb_open'])
            if '.' in bn:
                parts = bn.split('.')
                text.append(('sys.modules["%s"].__setattr__("%s", m)'
                            ) % ('.'.join(parts[:-1]), parts[-1]))
            self._execs.extend([
                BREEDER_DIVIDER,
                'm = sys.modules["%s"]' % (bn, ),
                'exec(__FILES[".SELF/%s"], m.__dict__)' % (fn, ),
                ''])
            # text.extend([
            #     'exec(__FILES[".SELF/%s"], m.__dict__)' % (fn, ),
            #     ''])
            out.write(BREEDER_DIVIDER + "\n" + '\n'.join(text) + '\n')
        for bn in self._modules_order:
            fn = self._modules_to_file[bn]
            pre, lines, post = format_snake(fn, raw=False, compress=compress, binary=False)
            text = ['__FILES[".SELF/%s"] = %s' % (fn, pre)]
            text.extend(lines)
            text.extend([
                post,
                'm = sys.modules["%s"] = new_module("%s")' % (bn, bn),
                'm.__file__ = "%s"' % (fn, ),
                'm.open = __comb_open'])
            if '.' in bn:
                parts = bn.split('.')
                text.append(('sys.modules["%s"].__setattr__("%s", m)'
                            ) % ('.'.join(parts[:-1]), parts[-1]))
            self._execs.extend([
                BREEDER_DIVIDER,
                'm = sys.modules["%s"]' % (bn, ),
                'exec(__FILES[".SELF/%s"], m.__dict__)' % (fn, ),
                ''])
            # text.extend([
            #     'exec(__FILES[".SELF/%s"], m.__dict__)' % (fn, ),
            #     ''])
            out.write(BREEDER_DIVIDER + '\n' + '\n'.join(text) + '\n')

    def _extract_module_name_from_filename(self, fn: str) -> str:
        path = os.path.dirname(fn)
        if fn.endswith('/__init__.py'):
            bn = os.path.basename(path)
            path = path[:-(len(bn)+1)]
        else:
            bn = os.path.basename(fn).replace('.py', '')

        while path and os.path.exists(os.path.join(path, '__init__.py')):
            pbn = os.path.basename(path)
            bn = '%s.%s' % (pbn, bn)
            path = path[:-(len(pbn)+1)]

        return bn

    def _create_list_of_modules_python(self, fn: str) -> None:
        fn = fn.replace("\\", "/")  # windows is shit
        bn = self._extract_module_name_from_filename(fn)
        self._modules.append(bn)
        self._files.append(f".SELF/{fn}")
        self._modules_to_file[bn] = f"{fn}"
        pass

    def _create_list_of_modules_dir(self, dn: str) -> None:
        files = [f for f in os.listdir(dn) if not f.startswith('.')]
        if '__init__.py' in files:
            files.remove('__init__.py')
            files[0:0] = ['__init__.py']
            self._modules_inits.append(
                self._extract_module_name_from_filename(os.path.join(dn, '__init__.py')))
        if '__main__.py' in files:
            files.remove('__main__.py')
            if main:
                files.append('__main__.py')
        for fn in files:
            fn = os.path.join(dn, fn)
            self._create_list_of_modules_impl(fn)
        pass

    def _create_list_of_modules_impl(self, fn: str) -> None:
        fn = fn.replace("\\", "/")  # windows is shit
        if os.path.isdir(fn):
            self._create_list_of_modules_dir(fn)

        extension = fn.split('.')[-1].lower()
        if extension in self._ignore:
            pass
        elif extension in self._python_extensions:
            self._create_list_of_modules_python(fn)

    def _create_list_of_modules(self, fns: list[str]) -> None:
        for fn in fns:
            self._create_list_of_modules_impl(fn)

    def _resolve_module_full_name(self, bn: str, parent: str) -> str:
        if bn[0] == '.':
            if self._modules_to_file[parent].endswith('/__init__.py'):
                return parent + bn
            return '.'.join(parent.split('.')[:-1]) + bn
        return bn

    def _create_import_order_impl(self, bn: str, already_visited: set[str]) -> list[str]:
        order = []
        if bn in already_visited:
            return order

        if bn not in self._modules:
            return order

        already_visited.add(bn)
        order.append(bn)
        with open(self._modules_to_file[bn], 'r') as f:
            for line in f:
                modules = []
                if line.strip().startswith("import"):
                    line = re.sub(
                        r'\s*,\s*', ', ', line.replace('import', '').replace('\n', '')).strip()
                    modules = line.split(', ')
                elif line.strip().startswith("from"):
                    line = ' '.join(line.strip().split())
                    modules = [line.split()[1]]
                    # print("#", bn, "->", modules[0])
                for module in modules:
                    module = self._resolve_module_full_name(module, bn)
                    if module not in self._modules:
                        continue
                    order.extend(self._create_import_order_impl(
                        module, already_visited))
        return order

    def _create_import_order(self) -> None:
        already_visited = set()
        for bn in self._modules:
            self._modules_order.extend(
                reversed(self._create_import_order_impl(bn, already_visited)))

    def breed(self, fns: list[str], compress: bool = False, out: io.TextIOWrapper = sys.stdout) -> None:
        self._create_list_of_modules(fns)
        self._create_import_order()
        out.write(BREEDER_PREAMBLE)
        self._breed(compress, out)
        out.write("\n".join(self._execs))
        out.write(BREEDER_POSTAMBLE)
        pass


def main() -> None:
    def draw_logo() -> None:
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 4 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 5 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 6 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " " * 47 + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 3 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 5 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 5 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " " * 47 + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 3 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 6 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 4 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " " * 47 + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 3 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 4 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " " * 47 + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 3 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 3 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " ________         ___                 __       " + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.RED + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 5 + Style.RESET_ALL
            + Back.WHITE + Fore.RED + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 3 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "/_  __/ /  ___   / _ )_______ ___ ___/ /__ ____" + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 3 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 6 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 4 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " / / / _ \/ -_) / _  / __/ -_) -_) _  / -_) __/" + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 4 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 7 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 4 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "/_/ /_//_/\__/ /____/_/  \__/\__/\_,_/\__/_/   " + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 3 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " " * 47 + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 3 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 3 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "                 Yandex x ITMO                 " + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 0 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 5 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " " * 47 + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 0 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 5 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 0 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " " * 47 + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 0 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.BRIGHT + "██" * 9 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 0 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " " * 47 + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 9 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.GREEN + Style.DIM + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 0 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " " * 47 + Style.RESET_ALL + "\n")
        sys.stdout.write(
            Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 9 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 2 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "██" * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + "  " * 1 + Style.RESET_ALL
            + Back.WHITE + Fore.BLACK + Style.BRIGHT + " " * 47 + Style.RESET_ALL + "\n")

        sys.stdout.write(Style.RESET_ALL)
    
    draw_logo()

    parser = argparse.ArgumentParser(
                    prog='TheBreeder',
                    description='Tool for breeding Python projects',
                    epilog='https://github.com/Dream-Team-ITMO/breeder')
    parser.add_argument("directory", type=str, help="Directory with project to breed")
    parser.add_argument("--compress", action="store_true", help="Compress and base64 the source code")
    parser.add_argument("--out", type=str, help="Output file (default is \"directory.breeded.py\")")
    args = parser.parse_args()
    if not os.path.isdir(args.directory):
        print(f"Error: {args.directory} is not a directory")
        sys.exit(1)
    try:
        if args.out:
            out = open(args.out, "w")
        else:
            out = open(os.path.join(args.directory, "breeded.py"), "w")
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)
    breeder = Breeder()
    breeder.breed([args.directory], compress=args.compress, out=out)
    pass


if __name__ == "__main__":
    main()
